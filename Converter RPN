

def priority(symbol):
    if symbol == "^":
        return 4
    elif symbol == "*" or symbol == "/":
        return 3
    elif symbol == "+" or symbol == "-":
        return 2
    elif symbol == "(" or symbol == ")":
        return 1


def RPN_converter(primer):
    flag = False
    primer_full = []
    for key in range(len(primer)):
        if (primer[key] < "0" or primer[key] > "9") and primer[key] != ".":
            primer_full.append(primer[key])
            flag = False
        if "0" <= primer[key] <= "9" or primer[key] == ".":
            if flag is False:
                primer_full.append(primer[key])
                flag = True
            else:
                primer_full[len(primer_full)-1] = primer_full[len(primer_full)-1] + primer[key]

    for key in range(len(primer_full)):
        if primer_full[key].isnumeric():
            if "." in primer_full[key]:
                primer_full[key] = float(primer_full[key])
            else:
                primer_full[key] = int(primer_full[key])

    for key in range(len(primer_full)):
        if key == 0 and primer_full[key] == "-" or primer_full[key-1] == "(" and primer_full[key] == "-":
            primer_full[key + 1] *= -1
            del primer_full[key]

    primer = []
    stack = []
    key = 0
    while key < len(primer_full):
        if type(primer_full[key]) is int or type(primer_full[key]) is float:
            primer.append(primer_full[key])
        else:
            if primer_full[key] == "(":
                stack.append(primer_full[key])
            elif primer_full[key] == ")":
                while "(" in stack:
                    if stack[len(stack) - 1] != "(":
                        primer.append(stack[len(stack) - 1])
                    del stack[len(stack) - 1]
            else:
                if len(stack) > 0 and priority(primer_full[key]) > priority(stack[len(stack) - 1]) or len(stack) == 0:
                    stack.append(primer_full[key])
                else:
                    primer.append(stack[len(stack) - 1])
                    del stack[len(stack) - 1]
                    key -= 1
        key += 1
    while len(stack) > 0:
        primer.append(stack[len(stack) - 1])
        del stack[len(stack) - 1]
    return primer



if __name__ == "__main__":
    primer1: str = input("Enter primer:")
    print(RPN_converter(primer1))
